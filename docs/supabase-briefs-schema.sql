-- DreamCut Step 1 - Briefs Table Schema
-- This table stores the brief packages generated by the query analyzer

CREATE TABLE IF NOT EXISTS briefs (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  brief_id TEXT UNIQUE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- Request data
  request JSONB NOT NULL,
  
  -- Analysis results
  analysis JSONB NOT NULL,
  
  -- Processing plan
  plan JSONB NOT NULL,
  
  -- Status tracking
  status TEXT NOT NULL DEFAULT 'analyzed' CHECK (status IN ('analyzed', 'queued', 'processing', 'done', 'failed')),
  
  -- User association (optional for now)
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  
  -- Metadata
  metadata JSONB DEFAULT '{}',
  
  -- Indexes for performance
  CONSTRAINT briefs_brief_id_unique UNIQUE (brief_id)
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_briefs_brief_id ON briefs(brief_id);
CREATE INDEX IF NOT EXISTS idx_briefs_status ON briefs(status);
CREATE INDEX IF NOT EXISTS idx_briefs_user_id ON briefs(user_id);
CREATE INDEX IF NOT EXISTS idx_briefs_created_at ON briefs(created_at);

-- Create a function to automatically update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at
CREATE TRIGGER update_briefs_updated_at 
    BEFORE UPDATE ON briefs 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- Enable Row Level Security (RLS)
ALTER TABLE briefs ENABLE ROW LEVEL SECURITY;

-- Create policies for RLS
-- Users can only see their own briefs
CREATE POLICY "Users can view own briefs" ON briefs
    FOR SELECT USING (auth.uid() = user_id);

-- Users can insert their own briefs
CREATE POLICY "Users can insert own briefs" ON briefs
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Users can update their own briefs
CREATE POLICY "Users can update own briefs" ON briefs
    FOR UPDATE USING (auth.uid() = user_id);

-- Service role can do everything (for API operations)
CREATE POLICY "Service role full access" ON briefs
    FOR ALL USING (auth.role() = 'service_role');

-- Grant necessary permissions
GRANT ALL ON briefs TO authenticated;
GRANT ALL ON briefs TO service_role;
